local M = {}

M.run_script_with_current_file = function()
    local current_file = vim.fn.expand('%')
    vim.cmd('write')  -- Save the current file

    -- Function to handle the output
---@diagnostic disable-next-line: unused-local
    local function handle_output(job_id, data, event)
        if event == "stdout" or event == "stderr" then
            -- Filter out empty strings from the data
            local filtered_data = {}
            for _, line in ipairs(data) do
                if line ~= "" then
                    table.insert(filtered_data, line)
                end
            end

            -- Create a new buffer and window to display the output if there's data
            if #filtered_data > 0 then
                local buf = vim.api.nvim_create_buf(false, true)
                vim.api.nvim_buf_set_lines(buf, 0, -1, false, filtered_data)
---@diagnostic disable-next-line: unused-local
                local win = vim.api.nvim_open_win(buf, true, {
                    relative = "editor",
                    width = math.floor(vim.o.columns * 0.8),
                    height = math.floor(vim.o.lines * 0.8),
                    row = math.floor(vim.o.lines * 0.1),
                    col = math.floor(vim.o.columns * 0.1),
                    border = "rounded"
                })

                -- Set a key mapping in the floating window to close it with 'q'
                vim.api.nvim_buf_set_keymap(buf, 'n', 'q', '<Cmd>close<CR>', { noremap = true, silent = true })
            end
        end
    end

    -- Run the shell script and capture the output
    vim.fn.jobstart('./run.sh ' .. current_file, {
        stdout_buffered = true,
        stderr_buffered = true,
        on_stdout = handle_output,
        on_stderr = handle_output,
    })
end

return M
